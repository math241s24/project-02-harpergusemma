"species", "Filter by species",
choices = unique(salmon$sp_name),
selected = unique(salmon$sp_name)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
),
plotOutput("scatter")
)
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", salmon, selected = "Year"),
varSelectInput("yvar", "Y variable", salmon, selected = "num_fish"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(salmon$sp_name),
selected = unique(salmon$sp_name)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
),
plotOutput("scatter")
)
library(tidymodels)
library(tidymodels)
library(openintro)
library(mdsr)
library(mosaicData)
library(shiny)
library(bslib)
library(mosaicData)
library(shiny)
library(bslib)
library(ggExtra)
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", salmon, selected = "Year"),
varSelectInput("yvar", "Y variable", salmon, selected = "num_fish"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(salmon$sp_name),
selected = unique(salmon$sp_name)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$sp_name)
salmon |> filter(sp_name %in% input$sp_name)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = sp_name),
geom_point()
)
p
}, res = 100)
}
shinyApp(ui, server)
#| label: load-data
#| include: false
salmon <- read_csv("salmondata/salmon.csv")
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", salmon, selected = "Year"),
varSelectInput("yvar", "Y variable", salmon, selected = "num_fish"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(salmon$sp_name),
selected = unique(salmon$sp_name)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$sp_name)
salmon |> filter(sp_name %in% input$sp_name)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = sp_name),
geom_point()
)
p
}, res = 100)
}
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", salmon, selected = "Year"),
varSelectInput("yvar", "Y variable", salmon, selected = "Number of Fish (estimated)"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(salmon$`Species Name`),
selected = unique(salmon$`Species Name`)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$`Species Name`)
salmon |> filter(`Species Name` %in% input$`Species Name`)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = `Species Name`),
geom_point()
)
p
}, res = 100)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Salmon Populations in Alaska"),
sidebarLayout(
sidebarPanel(
selectInput("species", "Species:",
choices=unique(salmon$`Species Name`)),
selectInput("xvar","X Variable:",
choices=colnames(salmon)),
selectInput("yvar","Y Variable:",
choices=colnames(salmon)),
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output) {
subData <- reactive({
salmon %>%
filter(`Species Name` == input$`Species Name`)
})
output$plot <- renderPlot(
ggplot(subData(), aes(input$xvar,input$yvar)) +
geom_point()
)
}
shinyApp(ui,server)
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", salmon, selected = "Year"),
varSelectInput("yvar", "Y variable", salmon, selected = "Number of Fish (estimated)"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(salmon$`Species Name`),
selected = unique(salmon$`Species Name`)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$`Species Name`)
salmon |> filter(`Species Name` %in% input$`Species Name`)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = `Species Name`),
geom_point()
)
p
}, res = 100)
}
shinyApp(ui, server)
#| label: setup
#| message: false
#| echo: false
library(tidyverse)
library(tidymodels)
library(openintro)
library(mdsr)
library(mosaicData)
library(shiny)
library(bslib)
library(ggExtra)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE)
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", penguins, selected = "Bill Length (mm)"),
varSelectInput("yvar", "Y variable", penguins, selected = "Bill Depth (mm)"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(penguins$species),
selected = unique(penguins$species)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
penguins |> filter(species %in% input$species)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = species),
geom_point()
)
p
}, res = 100)
}
shinyApp(ui, server)
view(penguins)
salmon <- read_csv("salmondata/rawsalmon.csv")
salmon <- read_csv("salmondata/rawsalmon.csv")
salmon <- salmon %>% rename(sp_name = `Species Name`,
num_fish = `Number Of Fish (estimated)`,
land_weight = `Landed Weight (lbs)`,
whole_weight = `Whole Weight (lbs)`,
num_permit = `Permit Count`,
num_processor = `Processor Count`,
num_vessel = `Vessel Count`)
write.csv(salmon, "salmondata/salmon.csv")
#| label: load-data
#| include: false
salmon <- read_csv("salmondata/salmon.csv")
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", salmon, selected = "Year"),
varSelectInput("yvar", "Y variable", salmon, selected = "num_fish"),
checkboxGroupInput(
"sp_name", "Filter by species",
choices = unique(salmon$sp_name),
selected = unique(salmon$sp_name)
),
hr(), # Add a horizontal rule
checkboxInput("by_sp_name", "Show species", TRUE),
),
plotOutput("scatter")
)
salmon <- salmon %>% rename(species = `Species Name`,
num_fish = `Number Of Fish (estimated)`,
land_weight = `Landed Weight (lbs)`,
whole_weight = `Whole Weight (lbs)`,
num_permit = `Permit Count`,
num_processor = `Processor Count`,
num_vessel = `Vessel Count`)
salmon <- read_csv("salmondata/rawsalmon.csv")
salmon <- salmon %>% rename(species = `Species Name`,
num_fish = `Number Of Fish (estimated)`,
land_weight = `Landed Weight (lbs)`,
whole_weight = `Whole Weight (lbs)`,
num_permit = `Permit Count`,
num_processor = `Processor Count`,
num_vessel = `Vessel Count`)
write.csv(salmon, "salmondata/salmon.csv")
#| label: load-data
#| include: false
salmon <- read_csv("salmondata/salmon.csv")
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", salmon, selected = "Year"),
varSelectInput("yvar", "Y variable", salmon, selected = "num_fish"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(salmon$species),
selected = unique(salmon$species)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
salmon |> filter(species %in% input$species)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = species),
geom_point()
)
p
}, res = 100)
}
shinyApp(ui, server)
shinyApp(ui, server)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
salmon |> filter(species %in% input$species)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = species),
geom_density(stat = "idetity")
)
p
}, res = 100)
}
shinyApp(ui, server)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
salmon |> filter(species %in% input$species)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = species),
geom_density(stat = "identity")
)
p
}, res = 100)
}
shinyApp(ui, server)
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", salmon, selected = "Year"),
varSelectInput("yvar", "Y variable", salmon, selected = "num_fish"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(salmon$species),
selected = unique(salmon$species)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
),
plotOutput("histogram")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
salmon |> filter(species %in% input$species)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = species),
geom_histogram(stat = "identity")
)
p
}, res = 100)
}
shinyApp(ui, server)
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", salmon, selected = "Year"),
varSelectInput("yvar", "Y variable", salmon, selected = "num_fish"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(salmon$species),
selected = unique(salmon$species)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
),
plotOutput("distPlot")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
salmon |> filter(species %in% input$species)
})
output$distPlot <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = species),
geom_histogram(stat = "identity")
)
p
}, res = 100)
}
shinyApp(ui, server)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
salmon |> filter(species %in% input$species)
})
output$distPlot <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(fill = species),
geom_histogram(stat = "identity")
)
p
}, res = 100)
}
shinyApp(ui, server)
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", salmon, selected = "Year"),
varSelectInput("yvar", "Y variable", salmon, selected = "num_fish"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(salmon$species),
selected = unique(salmon$species)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
),
plotOutput("density")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
salmon |> filter(species %in% input$species)
})
output$density <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(fill = species),
geom_density(stat = "identity")
)
p
}, res = 100)
}
shinyApp(ui, server)
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", salmon, selected = "Year"),
varSelectInput("yvar", "Y variable", salmon, selected = "num_fish"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(salmon$species),
selected = unique(salmon$species)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
),
plotOutput("distPlot")
)
ui <- page_sidebar(
sidebar = sidebar(
varSelectInput("xvar", "X variable", salmon, selected = "Year"),
varSelectInput("yvar", "Y variable", salmon, selected = "num_fish"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(salmon$species),
selected = unique(salmon$species)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
),
plotOutput("distPlot")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
salmon |> filter(species %in% input$species)
})
output$distPlot <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(fill = species),
geom_histogram(stat = "identity"),
scale_color_brewer(palette = "Set2")
)
p
}, res = 100)
}
shinyApp(ui, server)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
salmon |> filter(species %in% input$species)
})
output$distPlot <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(fill = species),
geom_histogram(stat = "identity")+
scale_color_brewer(palette = "Set2")
)
p
}, res = 100)
}
shinyApp(ui, server)
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(fill = species),
geom_histogram(stat = "identity")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
salmon |> filter(species %in% input$species)
})
output$distPlot <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(fill = species),
geom_histogram(stat = "identity")
)
p
}, res = 100)
}
shinyApp(ui, server)
