{
  "hash": "98599c0daa49b6d59947cfa4497c5501",
  "result": {
    "markdown": "---\ntitle: \"Fish Shiny App\"\nauthors: \"Emma Campbell, Gus Compton, Harper Lethin\"\noutput: quarto::quarto_shiny_document\nruntime: shiny\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#|context: setup\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidytext)\nlibrary(textdata)\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.5      ✔ rsample      1.2.1 \n✔ dials        1.2.1      ✔ tune         1.2.0 \n✔ infer        1.0.7      ✔ workflows    1.1.4 \n✔ modeldata    1.3.0      ✔ workflowsets 1.1.0 \n✔ parsnip      1.2.1      ✔ yardstick    1.3.1 \n✔ recipes      1.0.10     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n```\n:::\n\n```{.r .cell-code}\nlibrary(openintro)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: airports\nLoading required package: cherryblossom\nLoading required package: usdata\n\nAttaching package: 'openintro'\n\nThe following object is masked from 'package:modeldata':\n\n    ames\n```\n:::\n\n```{.r .cell-code}\nlibrary(mdsr)\nlibrary(mosaicData)\nlibrary(shiny)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'shiny'\n\nThe following object is masked from 'package:infer':\n\n    observe\n```\n:::\n\n```{.r .cell-code}\nlibrary(bslib)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'bslib'\n\nThe following object is masked from 'package:broom':\n\n    bootstrap\n\nThe following object is masked from 'package:utils':\n\n    page\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggExtra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'ggExtra'\n\nThe following object is masked from 'package:shiny':\n\n    runExample\n```\n:::\n\n```{.r .cell-code}\nlibrary(quarto)\nlibrary(readr)\n\nsalmon <- read_csv(\"salmondata/salmon.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 1902 Columns: 10\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): Area, species dbl (8): ...1, Year, num_fish, land_weight, whole_weight,\nnum_permit, num_pr...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- page_sidebar(\n  sidebar = sidebar(\n    varSelectInput(\"xvar\", \"X variable\", salmon, selected = \"Year\"),\n    varSelectInput(\"yvar\", \"Y variable\", salmon, selected = \"num_fish\"),\n    checkboxGroupInput(\n      \"species\", \"Filter by species\",\n      choices = unique(salmon$species), \n      selected = unique(salmon$species)\n    ),\n    hr(), # Add a horizontal rule\n    checkboxInput(\"by_species\", \"Show species\", TRUE),\n  ),\n  plotOutput(\"distPlot\")\n)\n\nserver <- function(input, output, session) {\n  subsetted <- reactive({\n    req(input$species)\n    salmon |> filter(species %in% input$species)\n  })\n  \n  output$distPlot <- renderPlot({\n    p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(\n      theme(legend.position = \"bottom\"),\n      if (input$by_species) aes(color = species),\n      geom_point(),\n      geom_smooth(method = 'lm')\n    )\n    \n    \n    p\n  }, res = 100)\n}\n\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<iframe data-deferred-src=\"app4e2da4372abf4ecea762ffb72ad6f87f/?w=&amp;__subapp__=1\" width=\"100%\" height=\"400\" class=\"shiny-frame shiny-frame-deferred\"></iframe>`{=html}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}